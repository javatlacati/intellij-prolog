buildscript {
    repositories {
        mavenCentral()
        maven { url "https://www.jetbrains.com/intellij-repository/releases" }
        maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
    }
    dependencies {
//        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:1.7.0"
//        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-grammarkit-plugin:2020.1"
    }
}

plugins {
    id 'scala'
    id "org.jetbrains.intellij" version '1.12.0'
//    id "org.jetbrains.grammarkit" version "2021.2.2"
}

//apply plugin: "org.jetbrains.intellij"
//apply plugin: "org.jetbrains.grammarkit"

group 'tech.phosphorus'
version '0.1.3.1'

sourceCompatibility = 17

repositories {
    mavenCentral()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://cache-redirector.jetbrains.com/intellij-dependencies" }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(ScalaCompile) {
            scalaCompileOptions.deprecation = false
        }
    }
}

dependencies {
    implementation group: 'org.eclipse.mylyn.github', name: 'org.eclipse.egit.github.core', version: '2.1.5'
    implementation 'org.scala-lang:scala-library:2.11.12'
    testImplementation 'org.scalatest:scalatest_2.11:3.0.0'
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
}

publishPlugin {
    Properties properties = new Properties()
    try {
        properties.load(new FileInputStream("gradle.properties"))
        token = properties.getProperty("intellijPublishToken")
    } catch (IOException ignored) {
    }
}

runPluginVerifier {
    ideVersions = ["IC-2023.1.2", "CL-2022.3.1", "WS-2022.3.1"]
}

signPlugin {
    Properties properties = new Properties()
    try {
        properties.load(new FileInputStream("gradle.properties"))
        certificateChain = Files.readString(Paths.get(properties.getProperty("keyChain"))).stripIndent()
        privateKey = Files.readString(Paths.get(properties.getProperty("privateKey"))).stripIndent()
        password = properties.getProperty("signPassword")
    } catch (IOException ignored) {
        ignored.printStackTrace()
    }
}

// create your own .ijlocation if any alternatives should be suggested
static def findIntellijPath() {
    try {
        def workdir = System.getProperty("user.dir")
        if (workdir != null && Files.exists(Paths.get(workdir).resolve(".ijlocation"))) {
            return Files.readAllLines(Paths.get(workdir).resolve(".ijlocation"))[0].trim()
        } else {
            def user = System.getProperty("user.name")
            def apps = System.getProperty("os.name").startsWith("Windows")
                    ? "C:\\Users\\$user\\AppData\\Local\\JetBrains\\Toolbox\\apps"
                    : "/home/$user/.local/share/JetBrains/Toolbox/apps"
            if (!Files.exists(Paths.get(apps))) return null
            return Files.list(Paths.get(apps))
                    .filter({ _ -> _.getFileName().startsWith("IDEA-C") || _.getFileName().startsWith("IDEA-U") })
                    .map({ _ -> _.resolve("ch-0") }).filter({ f -> f != null && Files.isDirectory(f) })
                    .flatMap({ f -> Files.list(f) }).filter({ _ -> _.fileName.toString().matches("\\d+\\.\\d+\\.\\d+") })
                    .sorted({ a, b -> b.fileName <=> a.fileName }).findFirst().orElseGet({ _ -> null })
        }
    } catch (Exception ignored) { // this is so java, I dont like it :(
        ignored.printStackTrace(System.out)
        return null
    }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    def localDist = findIntellijPath()
    if (!System.getenv("CI")?.trim() && localDist != null) {
        localPath localDist.toString()
    } else {
        type = "IU"
        version = "2023.1.2"
    }
}

sourceSets.main.scala.srcDirs = ['src/main/gen', 'src/main/scala']

//apply plugin: 'org.jetbrains.grammarkit'
//
//import org.jetbrains.grammarkit.tasks.GenerateLexerTask
//import org.jetbrains.grammarkit.tasks.GenerateParserTask

import java.nio.file.Files
import java.nio.file.Paths


//task generatePrologLexer(type: GenerateLexer) {
//    source = "src/main/lang/prologLexer.flex"
//
//    targetDir = "src/main/gen/tech/phosphorus/intellij/prolog"
//
//    targetClass = "PrologLexer"
//
//    purgeOldFiles = true
//}
//
//task generatePrologParser(type: GenerateParser) {
//    // source bnf file
//    source = "src/main/lang/prolog.bnf"
//
//    // optional, task-specific root for the generated files. Default: none
//    targetRoot = 'src/main/gen'
//
//    // path to a parser file, relative to the targetRoot
//    pathToParser = 'tech/phosphorus/intellij/prolog/psi/PrologParser.java'
//
//    // path to a directory with generated psi files, relative to the targetRoot
//    pathToPsiRoot = 'tech/phosphorus/intellij/prolog/psi/'
//
//    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
//    purgeOldFiles = true
//}

task "generateDirs" {
    sourceSets*.scala.srcDirs*.each {
        it.mkdirs()
    }
}

patchPluginXml {
    changeNotes = """<ul>
        <li>keep up with IDEA 2022.3.1</li>
        <li>add settings page for highlight color schema (credit to @javatlacati)</li>
        <li>several in-production bug was fixed to improve stability</li>
    </ul>"""
}
